// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: entry.sql

package db

import (
	"context"
)

const createEntry = `-- name: CreateEntry :one
INSERT INTO enteries (
    account_id,
    amount
) VALUES (
             $1, 200
         ) RETURNING id, account_id, amount, created_at
`

func (q *Queries) CreateEntry(ctx context.Context, accountID int64) (Entery, error) {
	row := q.db.QueryRowContext(ctx, createEntry, accountID)
	var i Entery
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const getEntry = `-- name: GetEntry :one
SELECT id, account_id, amount, created_at FROM enteries
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetEntry(ctx context.Context, id int64) (Entery, error) {
	row := q.db.QueryRowContext(ctx, getEntry, id)
	var i Entery
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const listEntries = `-- name: ListEntries :many
SELECT id, account_id, amount, created_at FROM enteries
WHERE account_id = $1
ORDER BY id
    LIMIT 2
OFFSET 3
`

func (q *Queries) ListEntries(ctx context.Context, accountID int64) ([]Entery, error) {
	rows, err := q.db.QueryContext(ctx, listEntries, accountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Entery
	for rows.Next() {
		var i Entery
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
